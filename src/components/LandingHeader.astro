---
import Logo from "./Logo.astro";

---



<header id="landing-header" class="py-6 px-10 flex items-center fixed top-0 w-full justify-between z-40 text-white">
    <div class="flex flex-grow basis-0">
    <Logo />
</div>
<nav>
  <div class="lg:hidden">
    <button id="mobile-menu-button" class="block text-xl font-bold px-4 py-2 transition-color duration-500 text-current fixed">
      Menú
    </button>
    <ul id="mobile-menu" class="hidden fixed">
      <li><a href="#">Información</a></li>
      <li><a href="#">Excursiones</a></li>
      <li><a href="#">Riads</a></li>
      <li><a href="#">Ciudades</a></li>
      <li><a href="#">Tu viaje</a></li>
      <li><a href="#">Contacto</a></li>
    </ul>
  </div>
  <ul class="text-xl lg:flex lg:text-lg hidden" id="desktop-menu">
    <li class="mb-2 lg:mb-0">
      <a href="#" class="block transition-color duration-500 text-current font-bold px-4 py-2">Información</a>
    </li>
    <li class="mb-2 lg:mb-0">
      <a href="#" class="block transition-color duration-500 text-current font-bold px-4 py-2">Excursiones</a>
    </li>
    <li class="mb-2 lg:mb-0">
      <a href="#" class="block transition-color duration-500 text-current font-bold px-4 py-2">Riads</a>
    </li>
    <li class="mb-2 lg:mb-0">
      <a href="#" class="block transition-color duration-500 text-current font-bold px-4 py-2">Ciudades</a>
    </li>
    <li class="mb-2 lg:mb-0">
      <a href="#" class="block transition-color duration-500 text-current font-bold px-4 py-2">Tu viaje</a>
    </li>
    <li class="mb-2 lg:mb-0">
      <a href="#" class="block transition-color duration-500 text-current font-bold px-4 py-2">Contacto</a>
    </li>
  </ul>
  
  <style>
    /* Estilos para el botón y menú desplegable en dispositivos móviles */
    #mobile-menu-button {
      display: block;
      background: none;
      border: none;
      cursor: pointer;
    }
  
    #mobile-menu {
      display: none;
    }
  
    /* Mostrar/ocultar el menú desplegable en dispositivos móviles */
    #mobile-menu.active {
      display: block;
    }
  
    @media (max-width: 767px) {
      /* Ocultar el menú de escritorio en dispositivos móviles */
      #desktop-menu {
        display: none;
      }
  
      /* Mostrar el botón en dispositivos móviles */
      #mobile-menu-button {
        display: block;
      }
    }
  </style>
  
  <script>
    // Agregar funcionalidad de clic al botón para mostrar/ocultar el menú en dispositivos móviles
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
  
    mobileMenuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('active');
    });
  </script>
    <div
    id="menu-backdrop"
    class={`
        absolute bg-white/20 backdrop-blur-lg rounded 
        left-[var(--left)] top-[var(--top)] 
        w-[var(--width)] h-[var(--height)] 
        trasition-all duration-500 
        ease-in-out opacity-0 -z-10
        `}
    />

    
</header>

<script>
    const listItem = document.querySelectorAll("#landing-header li")
    const menuBackDrop = document.querySelector("#menu-backdrop") as HTMLElement
  
    listItem.forEach((item) => {
      item.addEventListener("mouseenter", () => {
        const { left, top, width, height } = item.getBoundingClientRect()
  
        menuBackDrop.style.setProperty("--left", `${left}px`)
        menuBackDrop.style.setProperty("--top", `${top}px`)
        menuBackDrop.style.setProperty("--width", `${width}px`)
        menuBackDrop.style.setProperty("--height", `${height}px`)
  
        menuBackDrop.style.opacity = "1"
        menuBackDrop.style.visibility = "visible"
      })
  
      item.addEventListener("mouseleave", () => {
        menuBackDrop.style.opacity = "0"
        menuBackDrop.style.visibility = "hidden"
      })
    })
  </script>

    

<script>
    const $header = document.querySelector('#landing-header') as HTMLElement

    const oberserverOptions = {
        root: null, 
        rootMargin: '0px', // en cuanto se vea el elemento
        threshold: 0.5, // porcentaje de visibildad
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            const { isIntersecting } = entry 
            if(isIntersecting) {
                const color = entry.target.getAttribute('data-header-color')
                $header.style.color = color
            }
        })
    }, oberserverOptions);

    const $sections = document.querySelectorAll(".landing-section")
    $sections.forEach((section) => observer.observe(section));
